diff --git a/node_modules/db0/connectors/postgresql.mjs b/node_modules/db0/connectors/postgresql.mjs
index b25e11f..0b6f3b1 100644
--- a/node_modules/db0/connectors/postgresql.mjs
+++ b/node_modules/db0/connectors/postgresql.mjs
@@ -1,56 +1,56 @@
-import { Client } from "pg";
+import pg from "pg";
 export default function sqliteConnector(opts) {
-  let _client;
-  function getClient() {
-    if (_client) {
-      return _client;
+    let _client;
+    function getClient() {
+        if (_client) {
+            return _client;
+        }
+        const client = new pg.Client("url" in opts ? opts.url : opts);
+        _client = client.connect().then(() => {
+            _client = client;
+            return _client;
+        });
+        return _client;
     }
-    const client = new Client("url" in opts ? opts.url : opts);
-    _client = client.connect().then(() => {
-      _client = client;
-      return _client;
-    });
-    return _client;
-  }
-  async function query(sql, params) {
-    const client = await getClient();
-    return client.query(normalizeParams(sql), params);
-  }
-  return {
-    name: "postgresql",
-    exec(sql) {
-      return query(sql);
-    },
-    prepare(sql) {
-      const stmt = {
-        _sql: sql,
-        _params: [],
-        bind(...params) {
-          if (params.length > 0) {
-            this._params = params;
-          }
-          return stmt;
-        },
-        all(...params) {
-          return query(this._sql, params || this._params).then((r) => r.rows);
-        },
-        run(...params) {
-          return query(this._sql, params || this._params).then((r) => ({
-            result: r,
-            rows: r.rows
-          }));
+    async function query(sql, params) {
+        const client = await getClient();
+        return client.query(normalizeParams(sql), params);
+    }
+    return {
+        name: "postgresql",
+        exec(sql) {
+            return query(sql);
         },
-        get(...params) {
-          return query(this._sql, params || this._params).then(
-            (r) => r.rows[0]
-          );
+        prepare(sql) {
+            const stmt = {
+                _sql: sql,
+                _params: [],
+                bind(...params) {
+                    if (params.length > 0) {
+                        this._params = params;
+                    }
+                    return stmt;
+                },
+                all(...params) {
+                    return query(this._sql, params || this._params).then((r) => r.rows);
+                },
+                run(...params) {
+                    return query(this._sql, params || this._params).then((r) => ({
+                        result: r,
+                        rows: r.rows
+                    }));
+                },
+                get(...params) {
+                    return query(this._sql, params || this._params).then(
+                        (r) => r.rows[0]
+                    );
+                }
+            };
+            return stmt;
         }
-      };
-      return stmt;
-    }
-  };
+    };
 }
 function normalizeParams(sql) {
-  let i = 0;
-  return sql.replace(/\?/g, () => `$${++i}`);
+    let i = 0;
+    return sql.replace(/\?/g, () => `$${++i}`);
 }
